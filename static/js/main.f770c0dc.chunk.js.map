{"version":3,"sources":["Components/common/Header.js","Components/common/Pagination.js","Components/restaurants/RestaurantList.js","api/apiUtils.js","api/restaurantsApi.js","Components/common/Filter.js","Components/common/Sort.js","Components/home/HomePage.js","Components/PageNotFound.js","Components/App.js","index.js"],"names":["Header","className","range","from","to","step","i","push","Pagination","props","gotoPage","page","onPageChanged","f","currentPage","Math","max","min","totalPages","paginationData","pageLimit","totalRecords","setState","handleClick","evt","preventDefault","handleMoveLeft","state","pageNeighbours","handleMoveRight","fetchPageNumbers","totalNumbers","pages","leftBound","rightBound","beforeLastPage","startPage","endPage","singleSpillOffset","length","leftSpill","rightSpill","leftSpillPage","extraPages","ceil","this","aria-label","map","index","key","href","onClick","aria-hidden","e","Component","RestaurantList","restaurants","currentRestaurants","data","offset","slice","prevState","totalRestaurants","headerClass","join","trim","restaurant","id","name","city","telephone","genre","React","handleResponse","response","a","ok","json","status","text","error","Error","handleError","console","baseUrl","dirMap","gt","asc","desc","lt","doSort","A","B","property","direction","b","toLowerCase","createSorter","args","ret","some","sorter","value","HomePage","filters","sorters","compareBy","sortList","arrayCopy","sort","log","users","fetch","headers","Authorization","then","catch","parseData","Array","isArray","filter","r","States","statesList","includes","createStatesList","Attires","attiresList","attire","createAttiresList","Genres","genresList","split","g","createGenresList","defaultProps","PageNotFound","App","exact","path","component","render","document","getElementById"],"mappings":"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","file":"static/js/main.f770c0dc.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Header() {\r\n  return (\r\n    <div className=\"jumbotron\">\r\n        <h1>Charter/Spectrum Code Challenge</h1>\r\n        <p>React Application using restaurant data</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;","import React, { Component, Fragment } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst LEFT_PAGE = \"LEFT\";\r\nconst RIGHT_PAGE = \"RIGHT\";\r\n\r\nconst range = (from, to, step = 1) => {\r\n  let i = from;\r\n  const range = [];\r\n\r\n  while (i <= to) {\r\n    range.push(i);\r\n    i += step;\r\n  }\r\n\r\n  return range;\r\n};\r\n\r\nclass Pagination extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    const { totalRecords = null, pageLimit = 30, pageNeighbours = 0 } = props;\r\n\r\n    this.pageLimit = typeof pageLimit === \"number\" ? pageLimit : 30;\r\n    this.totalRecords = typeof totalRecords === \"number\" ? totalRecords : 0;\r\n\r\n    this.pageNeighbours =\r\n      typeof pageNeighbours === \"number\"\r\n        ? Math.max(0, Math.min(pageNeighbours, 2))\r\n        : 0;\r\n\r\n    this.totalPages = Math.ceil(this.totalRecords / this.pageLimit);\r\n\r\n    this.state = { currentPage: 1 };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.gotoPage(1);\r\n  }\r\n\r\n  gotoPage = page => {\r\n    const { onPageChanged = f => f } = this.props;\r\n\r\n    const currentPage = Math.max(0, Math.min(page, this.totalPages));\r\n\r\n    const paginationData = {\r\n      currentPage,\r\n      totalPages: this.totalPages,\r\n      pageLimit: this.pageLimit,\r\n      totalRecords: this.totalRecords\r\n    };\r\n\r\n    this.setState({ currentPage }, () => onPageChanged(paginationData));\r\n  };\r\n\r\n  handleClick = (page, evt) => {\r\n    evt.preventDefault();\r\n    this.gotoPage(page);\r\n  };\r\n\r\n  handleMoveLeft = evt => {\r\n    evt.preventDefault();\r\n    this.gotoPage(this.state.currentPage - this.pageNeighbours * 2 - 1);\r\n  };\r\n\r\n  handleMoveRight = evt => {\r\n    evt.preventDefault();\r\n    this.gotoPage(this.state.currentPage + this.pageNeighbours * 2 + 1);\r\n  };\r\n\r\n  fetchPageNumbers = () => {\r\n    const totalPages = this.totalPages;\r\n    const currentPage = this.state.currentPage;\r\n    const pageNeighbours = this.pageNeighbours;\r\n\r\n    const totalNumbers = this.pageNeighbours * 2 + 3;\r\n    const totalBlocks = totalNumbers + 2;\r\n\r\n    if (totalPages > totalBlocks) {\r\n      let pages = [];\r\n\r\n      const leftBound = currentPage - pageNeighbours;\r\n      const rightBound = currentPage + pageNeighbours;\r\n      const beforeLastPage = totalPages - 1;\r\n\r\n      const startPage = leftBound > 2 ? leftBound : 2;\r\n      const endPage = rightBound < beforeLastPage ? rightBound : beforeLastPage;\r\n\r\n      pages = range(startPage, endPage);\r\n\r\n      const pagesCount = pages.length;\r\n      const singleSpillOffset = totalNumbers - pagesCount - 1;\r\n\r\n      const leftSpill = startPage > 2;\r\n      const rightSpill = endPage < beforeLastPage;\r\n\r\n      const leftSpillPage = LEFT_PAGE;\r\n      const rightSpillPage = RIGHT_PAGE;\r\n\r\n      if (leftSpill && !rightSpill) {\r\n        const extraPages = range(startPage - singleSpillOffset, startPage - 1);\r\n        pages = [leftSpillPage, ...extraPages, ...pages];\r\n      } else if (!leftSpill && rightSpill) {\r\n        const extraPages = range(endPage + 1, endPage + singleSpillOffset);\r\n        pages = [...pages, ...extraPages, rightSpillPage];\r\n      } else if (leftSpill && rightSpill) {\r\n        pages = [leftSpillPage, ...pages, rightSpillPage];\r\n      }\r\n\r\n      return [1, ...pages, totalPages];\r\n    }\r\n\r\n    return range(1, totalPages);\r\n  };\r\n\r\n  render() {\r\n    if (!this.totalRecords) return null;\r\n\r\n    if (this.totalPages === 1) return null;\r\n\r\n    const { currentPage } = this.state;\r\n    const pages = this.fetchPageNumbers();\r\n\r\n    return (\r\n      <Fragment>\r\n        <nav aria-label=\"Restaurants Pagination\">\r\n          <ul className=\"pagination\">\r\n            {pages.map((page, index) => {\r\n              if (page === LEFT_PAGE)\r\n                return (\r\n                  <li key={index} className=\"page-item\">\r\n                    <a\r\n                      className=\"page-link\"\r\n                      href=\"#\"\r\n                      aria-label=\"Previous\"\r\n                      onClick={this.handleMoveLeft}\r\n                    >\r\n                      <span aria-hidden=\"true\">&laquo;</span>\r\n                      <span className=\"sr-only\">Previous</span>\r\n                    </a>\r\n                  </li>\r\n                );\r\n                https://github.com/KaterinaLupacheva/react-sorting-with-dropdown.git\r\n              if (page === RIGHT_PAGE)\r\n                return (\r\n                  <li key={index} className=\"page-item\">\r\n                    <a\r\n                      className=\"page-link\"\r\n                      href=\"#\"\r\n                      aria-label=\"Next\"\r\n                      onClick={this.handleMoveRight}\r\n                    >\r\n                      <span aria-hidden=\"true\">&raquo;</span>\r\n                      <span className=\"sr-only\">Next</span>\r\n                    </a>\r\n                  </li>\r\n                );\r\n\r\n              return (\r\n                <li\r\n                  key={index}\r\n                  className={`page-item${\r\n                    currentPage === page ? \" active\" : \"\"\r\n                  }`}\r\n                >\r\n                  <a\r\n                    className=\"page-link\"\r\n                    href=\"#\"\r\n                    onClick={e => this.handleClick(page, e)}\r\n                  >\r\n                    {page}\r\n                  </a>\r\n                </li>\r\n              );\r\n            })}\r\n          </ul>\r\n        </nav>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nPagination.propTypes = {\r\n  totalRecords: PropTypes.number.isRequired,\r\n  pageLimit: PropTypes.number,\r\n  pageNeighbours: PropTypes.number,\r\n  onPageChanged: PropTypes.func\r\n};\r\n\r\nexport default Pagination;","import React from \"react\";\r\n\r\nimport Pagination from \"../common/Pagination\";\r\n\r\nclass RestaurantList extends React.Component {\r\n\r\n    state = {\r\n        restaurants: [],\r\n        currentRestaurants: [],\r\n        currentPage: null,\r\n        totalPages: null\r\n    };\r\n    \r\n    componentDidUpdate(prevState) {\r\n        const { restaurants } = this.props;\r\n        if (prevState.restaurants !== restaurants) {\r\n            this.setState({ restaurants: restaurants });\r\n        };\r\n\r\n    }\r\n\r\n    onPageChanged = data => {\r\n        const { restaurants } = this.state;\r\n        const { currentPage, totalPages, pageLimit } = data;\r\n    \r\n        const offset = (currentPage - 1) * pageLimit;\r\n        const currentRestaurants = restaurants.slice(offset, offset + pageLimit);\r\n    \r\n        this.setState({ currentPage, currentRestaurants, totalPages });\r\n      };\r\n\r\n    render() {\r\n\r\n        const {\r\n            restaurants,\r\n            currentRestaurants,\r\n            currentPage,\r\n            totalPages\r\n          } = this.state;\r\n          const totalRestaurants = restaurants.length;\r\n      \r\n          if (totalRestaurants === 0) return null;\r\n      \r\n          const headerClass = [\r\n            \"text-dark py-2 pr-4 m-0\",\r\n            currentPage ? \"border-gray border-right\" : \"\"\r\n          ]\r\n            .join(\" \")\r\n            .trim();\r\n\r\n\r\n        return (\r\n\r\n            <div className=\"container mb-5\">\r\n\r\n                <table className=\"table\">\r\n                    <thead>\r\n                        <tr>\r\n                        <th>Name</th>\r\n                        <th>City</th>\r\n                        <th>State</th>\r\n                        <th>Phone Number</th>\r\n                        <th>Genres</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {this.state.currentRestaurants.map(restaurant => {\r\n                        return (\r\n                            <tr key={restaurant.id}>\r\n                            <td>{restaurant.name}</td>\r\n                            <td>{restaurant.city}</td>\r\n                            <td>{restaurant.state}</td>\r\n                            <td>{restaurant.telephone}</td>\r\n                            <td>{restaurant.genre}</td>\r\n                            </tr>\r\n                        );\r\n                        })}\r\n                    </tbody>\r\n                </table>\r\n\r\n                <div className=\"row d-flex flex-row py-2\">\r\n                    <div className=\"w-100 px-4 py-2 d-flex flex-row flex-wrap align-items-center justify-content-between\">\r\n                        <div className=\"d-flex flex-row align-items-center\">\r\n                            <h4 className={headerClass}>\r\n                                <strong className=\"text-secondary\">{totalRestaurants}</strong>{\" \"}\r\n                                Restaurants\r\n                            </h4>\r\n                            {currentPage && (\r\n                                <span className=\"current-page d-inline-block h-100 pl-4 text-secondary\">\r\n                                Page <span className=\"font-weight-bold\">{currentPage}</span> /{\" \"}\r\n                                <span className=\"font-weight-bold\">{totalPages}</span>\r\n                                </span>\r\n                            )}\r\n                        </div>\r\n                        <div className=\"d-flex flex-row py-4 align-items-center\">\r\n                            <Pagination\r\n                                totalRecords={totalRestaurants}\r\n                                pageLimit={10}\r\n                                pageNeighbours={0}\r\n                                onPageChanged={this.onPageChanged}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            );\r\n    }\r\n}\r\n  \r\n\r\nexport default RestaurantList;","export async function handleResponse(response) {\r\n    if (response.ok) return response.json();\r\n    if (response.status === 400) {\r\n      // So, a server-side validation error occurred.\r\n      // Server side validation returns a string error message, so parse as text instead of json.\r\n      const error = await response.text();\r\n      throw new Error(error);\r\n    }\r\n    throw new Error(\"Network response was not ok.\");\r\n  }\r\n  \r\n  // In a real app, would likely call an error logging service.\r\n  export function handleError(error) {\r\n    // eslint-disable-next-line no-console\r\n    console.error(\"API call failed. \" + error);\r\n    throw error;\r\n  }","import { handleResponse, handleError } from \"./apiUtils\";\r\n//const baseUrl = process.env.REACT_APP_API_URL + \"/restaurants/\";\r\nconst baseUrl = \"https://code-challenge.spectrumtoolbox.com/api/restaurants/\";\r\n\r\nexport function getRestaurants() {\r\n  return fetch(baseUrl, {\r\n      headers: {\r\n          Authorization: \"Api-Key q3MNxtfep8Gt\",\r\n      },\r\n  })\r\n    .then(handleResponse)\r\n    .catch(handleError);\r\n}\r\n\r\n\r\nexport function getRestaurantsBySlug(slug) {\r\n  return fetch(baseUrl + \"?slug=\" + slug)\r\n    .then(response => {\r\n      if (!response.ok) throw new Error(\"Network response was not ok.\");\r\n      return response.json().then(restaurants => {\r\n        if (restaurants.length !== 1) throw new Error(\"Restaurants not found: \" + slug);\r\n        return restaurants[0]; // should only find one course for a given slug, so return it.\r\n      });\r\n    })\r\n    .catch(handleError);\r\n}","\r\nconst createStatesList = (...args) => {\r\n    var statesList = [];\r\n    args.map(restaurant => {\r\n        restaurant.map(r => {\r\n            if (!statesList.includes(r.state)) {\r\n                statesList.push(r.state);\r\n            }; \r\n        })\r\n    })\r\n    return statesList.sort();\r\n}\r\n\r\nconst createAttiresList = (...args) => {\r\n    var attiresList = [];\r\n    args.map(restaurant => {\r\n        restaurant.map(r => {\r\n            if (!attiresList.includes(r.attire)) {\r\n                attiresList.push(r.attire);\r\n            }; \r\n        })\r\n    })\r\n    return attiresList.sort();\r\n}\r\n\r\nconst createGenresList = (...args) => {\r\n    var genresList = [];\r\n    var genre = [];\r\n    args.map(restaurant => {\r\n        restaurant.map(r => {\r\n            genre = [];\r\n            genre = r.genre.split(',');\r\n            genre.map(g => {\r\n                if (!genresList.includes(g)) {\r\n                    genresList.push(g);\r\n                };                 \r\n            })\r\n        })\r\n    })\r\n    return genresList.sort();\r\n}\r\n\r\n  \r\nexport { createStatesList,  createAttiresList, createGenresList };","const dirMap = {\r\n    // greater-than\r\n    gt: { asc: 1, desc: -1 },\r\n    // less-than\r\n    lt: { asc: -1, desc: 1 }\r\n  };\r\n  \r\n  const doSort = (A, B, property, direction = 'ASC') => {\r\n    const a = A[ property ];\r\n    const b = B[ property ];\r\n  \r\n    if (a < b) {\r\n      return dirMap.lt[ direction.toLowerCase() ];\r\n    }\r\n    if (a > b) {\r\n      return dirMap.gt[ direction.toLowerCase() ];\r\n    }\r\n    return 0;\r\n  }\r\n  \r\n  const createSorter = (...args) => {\r\n    if (typeof args[0] === 'string') {\r\n      args = [\r\n        {\r\n          direction: args[1],\r\n          property: args[0]\r\n        }\r\n      ];\r\n    }\r\n  \r\n    return (A, B) => {\r\n      let ret = 0;\r\n  \r\n      args.some(sorter => {\r\n        const { property, direction = 'ASC' } = sorter;\r\n        const value = doSort(A, B, property, direction);\r\n  \r\n        if (value === 0) {\r\n          // they are equal, continue to next sorter if any\r\n          return false;\r\n        } else {\r\n          // they are different, stop at current sorter\r\n          ret = value;\r\n  \r\n          return true;\r\n        }\r\n      })\r\n  \r\n      return ret;\r\n    }\r\n  }\r\n  \r\n  export { createSorter };","import React from \"react\";\r\nimport Header from \"../common/Header\";\r\nimport RestaurantList from \"../restaurants/RestaurantList\";\r\nimport { getRestaurants } from \"../../api/restaurantsApi\";\r\nimport { createStatesList,  createAttiresList, createGenresList } from '../common/Filter';\r\nimport { createSorter } from '../common/Sort';\r\n\r\nclass HomePage extends React.Component {\r\n\r\n    state = {\r\n        restaurants: [],\r\n        filters: this.props.filters,\r\n        sorters: this.props.sorters\r\n    };\r\n\r\n    static defaultProps = {\r\n\r\n        sorters: [{\r\n          property: 'name'\r\n        }, {\r\n          property: 'state'\r\n        }]\r\n\r\n      };\r\n\r\n    componentDidMount() {\r\n        getRestaurants().then(restaurants => (this.setState({ restaurants: this.parseData(restaurants) })));\r\n        console.log(this.state.restaurants)\r\n    }\r\n\r\n    parseData(data) {\r\n        const { sorters } = this.state;\r\n        const { filters } = this.state;\r\n\r\n        if (data && data.length) {\r\n\r\n          if (Array.isArray(filters) && filters.length) {\r\n            data = data.filter(r => r.state === 'FL');\r\n          }\r\n\r\n          if (Array.isArray(sorters) && sorters.length) {\r\n            data.sort(createSorter(...sorters));\r\n          }\r\n        }\r\n    \r\n        console.log(data);\r\n\r\n        let States = createStatesList(data);\r\n        console.log(States);\r\n\r\n        let Attires = createAttiresList(data);\r\n        console.log(Attires);\r\n\r\n        let Genres = createGenresList(data);\r\n        console.log(Genres);\r\n\r\n        return data;\r\n      }\r\n\r\n    // componentDidUpdate(prevState) {\r\n    //     const { restaurants } = this.props;\r\n    //     if (prevState.restaurants !== restaurants) {\r\n    //         this.sortList(\"name\"); \r\n    //     };\r\n\r\n    // }\r\n\r\n    compareBy = (key) => {\r\n        return function(a, b) {\r\n          if (a[key] < b[key]) return -1;\r\n          if (a[key] > b[key]) return 1;\r\n          return 0;\r\n        };\r\n      };\r\n      \r\n    sortList = (key) => {\r\n        let arrayCopy = [...this.state.restaurants];\r\n        arrayCopy.sort(this.compareBy(key));\r\n        console.log(arrayCopy);\r\n        this.setState({ users: arrayCopy });\r\n    };\r\n\r\n    render() {\r\n\r\n        const { restaurants } = this.state;\r\n        console.log(restaurants);\r\n\r\n        return (\r\n            <div>\r\n            <Header />\r\n            \r\n            <div>\r\n                <h3>List of Restaurants</h3>\r\n            </div>\r\n\r\n            <RestaurantList restaurants={restaurants} />\r\n        </div>\r\n            );\r\n    }\r\n}\r\n  \r\n\r\nexport default HomePage;","import React from \"react\";\r\n\r\nconst PageNotFound = () => ( <h1>Oops!!! Page Not Found!!!</h1> );\r\n\r\nexport default PageNotFound;","import React from 'react';\r\nimport {Route, Switch} from \"react-router-dom\";\r\nimport HomePage from \"./home/HomePage\";\r\nimport '../Style/App.css';\r\nimport PageNotFound from './PageNotFound';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"container-fluid\">\r\n      <Switch>\r\n      <Route exact path=\"/\" component={HomePage} />\r\n      <Route component={PageNotFound} />\r\n      </Switch>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport {render} from 'react-dom';\r\nimport { BrowserRouter as Router } from 'react-router-dom';\r\nimport './index.css';\r\nimport'bootstrap/dist/css/bootstrap.min.css';\r\nimport App from './Components/App';\r\n\r\nrender(\r\n  <Router>\r\n    <App />\r\n  </Router>,\r\n  document.getElementById('root')\r\n);\r\n\r\n\r\n"],"sourceRoot":""}